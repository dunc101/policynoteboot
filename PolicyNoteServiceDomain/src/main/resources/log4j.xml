<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">
<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">

	<appender name="stdout" class="org.apache.log4j.ConsoleAppender">
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern"
				value="[%p]~%d{ISO8601}~%C~%M~%X{perfTime}^%X{mdcId1}^%X{mdcId2}^%X{mdcId3}~%m%n" />
		</layout>
	</appender>

	<appender name="stderr" class="org.apache.log4j.ConsoleAppender">
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern"
				value="[%p]~%d{ISO8601}~%C~%M~%X{perfTime}^%X{mdcId1}^%X{mdcId2}^%X{mdcId3}~%m%n" />
		</layout>
	</appender>

	<!-- 
	Database logging via EMS

	IPACCJMSBypassAppender - This a stub appender that performs no logging action with Log4J
	When the IPACCCommonLogger encounters this appender it uses the properties to create a
	message buffer backed by a pool of threads and EMS connections to send each message to
	a log handler via JMS queue.

	Properties:

	CONNECTION
	ProviderURL - URL for the EMS server where log messages will be sent
	InitialContextFactoryName - Name of the class that will create the EMS connection
	DestinationConnectionFactoryBindingName - Name of the connection factory that will provide the EMS connection

	SecurityPrincipalName - JNDI userid
	SecurityCredentials - JNDI password
	DestinationBindingName - name of the queue on which log messages will be placed.
	UserName - EMS user id
	Password - EMS password

	PERFORMANCE
	The following properties should be set with care. The pool size properties
	not only affect log message though put but can also degrade overall application performance.
	The BufferSize will potentially consume memory proportional to the average
	message size, roughly 128 bytes + mesage text.
	PoolSize - the number of threads held ready to service log requests (Defaults
	to 10)
	MaxPoolSize - the maximum number of threads that will be created to service log
	requests (Defaults to 50)
	BufferSize - the number log messages that will be held in memory while waiting to
	be sent(Defaults to 1000)
	-->
 
	<appender name="HydusExceptionLog"
		class="com.ipacc.log4j.appender.bypassappender.IpaccJmsExceptionBypassAppender">
		<param name="ProviderURL" value="tcp://inf008deva.ipacc.com:8000" />
		<param name="InitialContextFactoryName"
			value="com.tibco.tibjms.naming.TibjmsInitialContextFactory" />
		<param name="DestinationConnectionFactoryBindingName" value="AppLogQueueConnectionFactory" />
		<param name="SecurityPrincipalName" value="jndi.user" />
		<param name="SecurityCredentials" value="infinity" />
		<param name="DestinationBindingName" value="Q.IPACC.HIS.EXCEPTION" />
		<param name="UserName" value="logging.user1" />
		<param name="Password" value="infinity" />
		<param name="PoolSize" value="10" />
		<param name="MaxPoolSize" value="20" />
		<param name="BufferSize" value="234" />
		<param name="GuaranteeDelivery" value="true" />
	</appender>
 
	<appender name="HydusAuditLog"
		class="com.ipacc.log4j.appender.bypassappender.IpaccJmsAuditBypassAppender">
		<param name="AuditMessageType" value="CLAIMS" />
		<param name="ProviderURL" value="tcp://inf008deva.ipacc.com:8000" />
		<param name="InitialContextFactoryName"
			value="com.tibco.tibjms.naming.TibjmsInitialContextFactory" />
		<param name="DestinationConnectionFactoryBindingName" value="AppLogQueueConnectionFactory" />
		<param name="SecurityPrincipalName" value="jndi.user" />
		<param name="SecurityCredentials" value="infinity" />
		<param name="DestinationBindingName" value="Q.IPACC.HIS.AUDIT.CLAIMS" />
		<param name="UserName" value="logging.user1" />
		<param name="Password" value="infinity" />
		<param name="PoolSize" value="10" />
		<param name="MaxPoolSize" value="20" />
		<param name="BufferSize" value="234" />
		<param name="GuaranteeDelivery" value="true" />
	</appender>
 
	<appender name="dbLog"
		class="com.ipacc.log4j.appender.bypassappender.IpaccJmsLogBypassAppender">
		<param name="ProviderURL" value="tcp://inf008deva.ipacc.com:8000" />
		<param name="InitialContextFactoryName"
			value="com.tibco.tibjms.naming.TibjmsInitialContextFactory" />
		<param name="DestinationConnectionFactoryBindingName" value="AppLogQueueConnectionFactory" />
		<param name="SecurityPrincipalName" value="jndi.user" />
		<param name="SecurityCredentials" value="infinity" />
		<param name="DestinationBindingName" value="Q.IPACC.COMMON.LOGGING.XML" />
		<param name="UserName" value="logging.user1" />
		<param name="Password" value="infinity" />
		<param name="PoolSize" value="10" />
		<param name="MaxPoolSize" value="20" />
		<param name="BufferSize" value="234" />
		<param name="GuaranteeDelivery" value="false" />
	</appender>

	<!-- Logging for STATS messages only -->
	<appender name="statFile" class="com.ipacc.log4j.appender.logappender.IpaccFileAppender">
		<param name="File" value="c:\\logging\\{component}\\{servername}\\stat.log" />
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern"
				value="[%p]~%d{ISO8601}~%C~%M~%X{perfTime}^%X{mdcId1}^%X{mdcId2}^%X{mdcId3}~%m%n" />
		</layout>
		<!-- Use CustomLevelRangeFilter to identify those messages with levels that fall within the 
		Min/Max range (inclusive) and either EXCLUDE or INCLUDE them in the log based on the action param -->
		<filter class="com.ipacc.log4j.level.CustomLevelRangeFilter">
			<param name="LevelMax" value="STATS" />
			<param name="LevelMin" value="STATS" />
			<!-- Action = INCLUDE/EXCLUDE-->
			<param name="Action" value="INCLUDE" />
		</filter>
	</appender>

	<!-- Logging for ERROR messages only -->
	<appender name="errorFile" class="com.ipacc.log4j.appender.logappender.IpaccFileAppender">
		<param name="File" value="c:\\logging\\{component}\\{servername}\\error.log" />
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern"
				value="[%p]~%d{ISO8601}~%C~%M~%X{perfTime}^%X{mdcId1}^%X{mdcId2}^%X{mdcId3}~%m%n" />
		</layout>
		<!-- Use CustomLevelRangeFilter to identify those messages with levels that fall within the 
		Min/Max range (inclusive) and either EXCLUDE or INCLUDE them in the log based on the action param -->
		<filter class="com.ipacc.log4j.level.CustomLevelRangeFilter">
			<param name="LevelMax" value="ERROR" />
			<param name="LevelMin" value="ERROR" />
			<!-- Action = INCLUDE/EXCLUDE-->
			<param name="Action" value="INCLUDE" />
		</filter>
	</appender>

	<!-- Logging for all messages-->
	<appender name="logFile" class="com.ipacc.log4j.appender.logappender.IpaccFileAppender">
		<param name="File" value="c:\\logging\\{component}\\{servername}\\ipacc.log" />
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern"
				value="[%p]~%d{ISO8601}~%C~%M~%X{perfTime}^%X{mdcId1}^%X{mdcId2}^%X{mdcId3}~%m%n" />
		</layout>
	</appender>

	<logger name="com.ipacc" additivity="false">
		<level value="DEBUG" />
		<appender-ref ref="HydusAuditLog" />
		<appender-ref ref="HydusExceptionLog" />
		<appender-ref ref="dbLog" />
		<appender-ref ref="statFile" />
		<appender-ref ref="errorFile" />
		<appender-ref ref="logFile" />	
	</logger>

	<root>
		<level value="FATAL" />
	</root>
</log4j:configuration>